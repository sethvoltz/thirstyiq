#  ██████████ ██      ██                  ██            ██   ███████
# ░░░░░██░░░ ░██     ░░                  ░██    ██   ██░██  ██░░░░░██
#     ░██    ░██      ██ ██████  ██████ ██████ ░░██ ██ ░██ ██     ░░██
#     ░██    ░██████ ░██░░██░░█ ██░░░░ ░░░██░   ░░███  ░██░██      ░██
#     ░██    ░██░░░██░██ ░██ ░ ░░█████   ░██     ░██   ░██░██    ██░██
#     ░██    ░██  ░██░██ ░██    ░░░░░██  ░██     ██    ░██░░██  ░░ ██
#     ░██    ░██  ░██░██░███    ██████   ░░██   ██     ░██ ░░███████ ██
#     ░░     ░░   ░░ ░░ ░░░    ░░░░░░     ░░   ░░      ░░   ░░░░░░░ ░░

service: thirstyIQ

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  # stage: dev
  region: us-west-2
  cfLogs: true

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: "arn:aws:sns:${self:provider.region}:*:refresh-users"
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
#package:
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  thirsty:
    handler: index.slash
    events:
      - http: POST thirsty

  authorization:
    handler: index.authorization
    events:
      - http: GET callback

  refresh:
    handler: index.refresh
    events:
      - sns: refresh-users
      - schedule: cron(0 4 * * ? *)

# AWS Cron Expressions:
# https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

resources:
  Resources:
    groupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: thirstyiq-groups
        KeySchema:
          - AttributeName: organization
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: organization
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: thirstyiq-users
        KeySchema:
          - AttributeName: organization
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: organization
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: name-index
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    slackTeamsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: thirstyiq-slack-teams
        # DeletionPolicy: Retain
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # DynamoDBIamPolicy:
    #   Type: AWS::IAM::Policy
    #   DependsOn: DynamoDbTable
    #   Properties:
    #     PolicyName: lambda-dynamodb
    #     PolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Action:
    #             - dynamodb:GetItem
    #             - dynamodb:PutItem
    #           Resource: arn:aws:dynamodb:*:*:table/thirstyiq-slack-teams
    #     Roles:
    #       - Ref: IamRoleLambdaExecution
